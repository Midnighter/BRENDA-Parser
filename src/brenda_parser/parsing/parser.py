# Copyright (c) 2011 Jacobs University Bremen gGmbH
# Copyright (c) 2018 Moritz E. Beber
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
# list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its contributors
# may be used to endorse or promote products derived from this software without
# specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

"""Parse BRENDA tokens using the provided grammar."""


import logging

from ply.yacc import yacc

import brenda_parser.models as models
from brenda_parser.exceptions import ValidationError
from brenda_parser.parsing.lexer import BRENDALexer


__all__ = ("BRENDAParser",)

LOGGER = logging.getLogger(__name__)


class BRENDAParser(object):
    """
    Parse the BRENDA flat file into database models.

    Implement the following rules using the tokens generated by an
    appropriate lexer.
    ::
        enzyme : ID EC_NUMBER comment
                 | END

        entry : ENTRY protein TEXT comment citation special
                | ENTRY protein TEXT comment
                | ENTRY protein TEXT

        protein_entry : PROTEIN_ENTRY new_protein protein_entry
                        | protein_entry protein_entry
                        | protein_entry ACCESSION CONTENT
                        | proteins

        comment : LPARENS comment RPARENS
                  | LPARENS RPARENS
                  | comment comment
                  | CONTENT

        special : LCURLY special RCURLY
                  | LCURLY RCURLY
                  | special special
                  | CONTENT

        proteins : POUND proteins POUND
                   | POUND POUND
                   | proteins proteins
                   | PROTEIN

        citations : LANGLE citations RANGLE
                    | LANGLE RANGLE
                    | citations citations
                    | CITATION

    """

    precedence = (
        # ("left", "ENZYME"),
        ("left", "ASSEMBLE"),
        ("left", "REDUCE"),
        ("left", "COMBINE")
    )

    def __init__(self, lexer=None, **kwargs):
        """
        Instantiate a BRENDA parser.

        Parameters
        ----------
        lexer : ply.lex (optional)
            Any ply.lex lexer instance that generates the tokens listed in the
            rules. The default uses a BRENDALexer instance.
        kwargs :
            Keyword arguments are passed to the ply.yacc.yacc call.
        """
        super(BRENDAParser, self).__init__()
        self._lexer = BRENDALexer() if lexer is None else lexer
        self.tokens = self._lexer.tokens
        self.parser = yacc(module=self, errorlog=LOGGER, **kwargs)
        self._session = None
        self.proteins = dict()
        self.citations = dict()
        self._current_entry = None

    def parse(self, section, session, **kwargs):
        """
        Parse an entire enzyme section according to the rules.

        The parser fills a database ``Enzyme`` model with information and
        returns it.

        Parameters
        ----------
        section : str
            A BRENDA enzyme section starting from 'ID   x.x.x.x' until '///'.
        session : sqlalchemy.Session
            A running session for querying database connections.
        kwargs :
            Keyword arguments are passed on to the ply.yacc.yacc.parse call.

        """
        self._session = session
        self.proteins.clear()
        self.citations.clear()
        self._current_entry = None
        return self.parser.parse(section, lexer=self._lexer, **kwargs)

    def p_enzyme(self, p):
        """enzyme : ENZYME_ENTRY EC_NUMBER new_enzyme"""
        p[0] = p[3]

    def p_new_enzyme(self, p):
        """new_enzyme :"""
        LOGGER.debug("%s %s", self.p_new_enzyme.__doc__, p[-1])
        assert p[-2] == "ID"
        p[0] = models.Enzyme(ec_number=p[-1])

    def p_enzyme_comment(self, p):
        """enzyme : enzyme comment"""
        if p[2] is not None:
            p[1].comments.append(p[2])
        p[0] = p[1]

    def p_enzyme_protein(self, p):
        """enzyme : enzyme protein_entry"""
        p[1].protein_references.append(p[2])
        p[0] = p[1]

    def p_enzyme_reference(self, p):
        """enzyme : enzyme reference_entry"""
        p[1].citation_references.append(p[2])
        p[0] = p[1]

    def p_enzyme_entry(self, p):
        """enzyme : enzyme entry"""
        # TODO: In future, add to specific children based on acronym.
        p[1].entries.append(p[2])
        p[0] = p[1]

    def p_enzyme_end(self, p):
        """enzyme : enzyme END"""
        # TODO: Finalize protein and citation references.
        p[0] = p[1]

    def p_entry(self, p):
        """entry : ENTRY new_entry %prec REDUCE"""
        assert p[1] == p[2].field.acronym
        p[0] = p[2]

    def p_new_entry(self, p):
        """new_entry : %prec REDUCE"""
        field = self._session.query(models.InformationField) \
            .filter_by(acronym=p[-1]) \
            .one()
        p[0] = models.FieldEntry(field=field, body="")

    def p_entry_content(self, p):
        """entry : entry CONTENT"""
        assert len(p[2]) > 0
        p[1].body += " {}".format(p[2])
        p[0] = p[1]

    def p_entry_proteins(self, p):
        """entry : entry proteins %prec ASSEMBLE"""
        if p[2] is not None:
            p[1].protein_references.extend(p[2])
        p[0] = p[1]

    def p_entry_comment(self, p):
        """entry : entry comment %prec ASSEMBLE"""
        if p[2] is not None:
            p[1].comments.append(p[2])
        p[0] = p[1]

    def p_entry_special(self, p):
        """entry : entry special %prec ASSEMBLE"""
        if p[2] is not None:
            p[1].special = p[2]
        p[0] = p[1]

    def p_entry_citations(self, p):
        """entry : entry citations %prec ASSEMBLE"""
        if p[2] is not None:
            p[1].citation_references.extend(p[2])
        p[0] = p[1]

    def p_reference_entry(self, p):
        """reference_entry : REFERENCE_ENTRY new_reference citations"""
        assert len(p[3]) == 1  # Reference entry only has its own number.
        self.citations[p[3][0]] = p[2]
        p[0] = p[2]

    def p_new_reference(self, p):
        """new_reference :"""
        assert p[-1] == "RF"
        field = self._session.query(models.InformationField) \
            .filter_by(acronym=p[-1]) \
            .one()
        p[0] = models.Reference(field=field, body="")

    def p_reference_content(self, p):
        """reference_entry : reference_entry CONTENT"""
        assert len(p[2]) > 0
        p[1].body += " {}".format(p[2])
        p[0] = p[1]

    def p_reference_year(self, p):
        """reference_entry : reference_entry comment %prec ASSEMBLE"""
        if p[2] is not None:
            p[1].body += " ({})".format(p[2].body)
        p[0] = p[1]

    def p_reference_pubmed(self, p):
        """reference_entry : reference_entry special %prec ASSEMBLE"""
        try:
            p[1].pubmed = p[2]
        except ValidationError:
            pass
        p[0] = p[1]

    def p_protein_entry(self, p):
        """protein_entry : PROTEIN_ENTRY new_protein proteins %prec COMBINE"""
        assert len(p[3]) == 1  # Protein entry only has its own number.
        self.proteins[p[3][0]] = p[2]
        p[0] = p[2]

    def p_new_protein(self, p):
        """new_protein :"""
        assert p[-1] == "PR"
        field = self._session.query(models.InformationField) \
            .filter_by(acronym=p[-1]) \
            .one()
        p[0] = models.Protein(field=field)

    def p_protein_organism(self, p):
        """protein_entry : protein_entry CONTENT %prec ASSEMBLE"""
        assert len(p[2]) > 0
        # TODO: Find or create the organism.
        p[1].organism_name += p[2]
        p[0] = p[1]

    def p_protein_accession(self, p):
        """protein_entry : protein_entry accession %prec ASSEMBLE"""
        p[1].accession = p[2]
        p[0] = p[1]

    def p_protein_comment(self, p):
        """protein_entry : protein_entry comment %prec ASSEMBLE"""
        if p[2] is not None:
            p[1].comments.append(p[2])
        p[0] = p[1]

    def p_protein_citations(self, p):
        """protein_entry : protein_entry citations %prec ASSEMBLE"""
        if p[2] is not None:
            p[1].citation_references.extend(p[2])
        p[0] = p[1]

    def p_accession_combine(self, p):
        """accession : accession AND ACCESSION %prec COMBINE"""
        p[1].accession = "{} & {}".format(p[1].accession, p[3])
        p[0] = p[1]

    def p_accession_database(self, p):
        """accession : accession CONTENT %prec COMBINE"""
        p[1].database = p[2]
        p[0] = p[1]

    def p_accession(self, p):
        """accession : ACCESSION %prec REDUCE"""
        p[0] = models.Accession(accession=p[1])

    def p_special(self, p):
        """special : LCURLY special RCURLY"""
        p[0] = p[2]

    def p_special_empty(self, p):
        """special : LCURLY RCURLY"""
        pass

    def p_special_combine(self, p):
        """special : special SPECIAL %prec COMBINE"""
        p[0] = "{0} {1}".format(p[1], p[2])

    def p_special_end(self, p):
        """special : SPECIAL %prec REDUCE"""
        p[0] = p[1].strip()

    def p_proteins(self, p):
        """proteins : POUND proteins POUND %prec ASSEMBLE"""
        p[0] = p[2]

    def p_proteins_empty(self, p):
        """proteins : POUND POUND %prec ASSEMBLE"""
        pass

    def p_proteins_combine(self, p):
        """proteins : proteins PROTEIN %prec COMBINE"""
        p[1].append(p[2])
        p[0] = p[1]

    def p_proteins_end(self, p):
        """proteins : PROTEIN %prec REDUCE"""
        p[0] = [p[1]]

    def p_citations(self, p):
        """citations : LANGLE citations RANGLE %prec ASSEMBLE"""
        p[0] = p[2]

    def p_citations_empty(self, p):
        """citations : LANGLE RANGLE %prec ASSEMBLE"""
        pass

    def p_citations_combine(self, p):
        """citations : citations CITATION %prec COMBINE"""
        p[1].append(p[2])
        p[0] = p[1]

    def p_citations_end(self, p):
        """citations : CITATION %prec REDUCE"""
        p[0] = [p[1]]

    def p_comment(self, p):
        """comment : LPARENS comment RPARENS %prec ASSEMBLE"""
        p[0] = p[2]

    def p_comment_empty(self, p):
        """comment : LPARENS RPARENS %prec ASSEMBLE"""
        pass

    def p_comment_combine(self, p):
        """comment : comment COMMENT %prec COMBINE"""
        p[1].body = "{0} {1}".format(p[1].body, p[2])
        p[0] = p[1]

    def p_comment_end(self, p):
        """comment : COMMENT %prec REDUCE"""
        p[0] = models.Comment(body=p[1])
        # p[0] = [models.Comment(body=c) for c in p[1].split(";")]

    def p_error(self, p):
        LOGGER.debug("Error: %s", str(p))
        # TODO: If `p` is None (we allow some empty rules) it's only an error
        # if any parentheses or similar are unbalanced.
        if False:
            raise SyntaxError(str(p))
